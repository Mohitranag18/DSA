Problem Link: https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/description/

class Solution {
    public int lb(int[] nums, int target){
        int low = 0;
        int high = nums.length - 1;
        int ans = -1;
        while(low <= high){
            int mid = (low + high)/2;
            if(nums[mid] >= target){
                ans = mid;
                high = mid - 1;
            }
            else{
                low = mid + 1;
            }
        }
        return ans;
    }
    public int ub(int[] nums, int target){
        int low = 0;
        int high = nums.length - 1;
        int ans = -1;
        while(low <= high){
            int mid = (low + high)/2;
            if(nums[mid] > target){
                ans = mid;
                high = mid - 1;
            }
            else{
                low = mid + 1;
            }
        }
        return ans;
    }
    public int[] searchRange(int[] nums, int target) {
        int lower = lb(nums, target);
        if(lower == -1 || nums[lower] != target){
            return new int[]{-1, -1};
        }
        int upper = ub(nums, target) - 1;
        if(upper < lower || nums[upper] != target){
            upper = lower; // When the target appears only once
            while (upper + 1 < nums.length && nums[upper + 1] == target) {
                upper++;
            }
        }
        return new int[]{lower, upper};
    }
}